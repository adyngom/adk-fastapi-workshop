services:
  # Main FastAPI + ADK Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: adk-workshop-api
    ports:
      - "8000:8000" # Expose for direct access if needed
    env_file: .env
    environment:
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_URL=http://mcp-server:3000
    volumes:
      - ./agents:/app/agents
      - ./api:/app/api
      - ./tools:/app/tools
      - ./config:/app/config
      - ./adk_agents:/app/adk_agents
    depends_on:
      - redis
    networks:
      - adk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: adk-workshop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - adk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server (Optional)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: adk-workshop-mcp
    ports:
      - "3000:3000"
    env_file: .env
    volumes:
      - ./mcp:/app
    networks:
      - adk-network
    restart: unless-stopped
    profiles:
      - mcp # Only start with 'docker compose --profile mcp up'

  # ADK Web Interface (Developer/Debugging UI)
  adk-web:
    build:
      context: .
      dockerfile: Dockerfile.adk
    container_name: adk-workshop-adk-web
    ports:
      - "3002:3002"
    env_file: .env
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - ./adk_agents:/app/adk_agents
    networks:
      - adk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (NGINX Proxy)
  frontend:
    image: nginx:alpine
    container_name: adk-workshop-frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
      - adk-web
    networks:
      - adk-network
    restart: unless-stopped

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: adk-workshop-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - adk-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: adk-workshop-grafana
    ports:
      - "3001:3000"
    env_file: .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - adk-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  adk-network:
    driver: bridge
